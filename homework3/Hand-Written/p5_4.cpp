#include<bits/stdc++.h>#define ll long long#define INF INT_MAXusing namespace std;class GraphNode{	public:		int depth;		int up;		int visited;		int degree;		int parent;		vector<int> adjlist;		GraphNode():degree(0), depth(0), up(INF), visited(0), parent(-1){}};void DFS(vector<GraphNode> &graph, int u){	graph[u].visited = 1;	for(auto v : graph[u].adjlist){		if(!graph[v].visited){			graph[v].depth = graph[u].depth + 1;			graph[v].degree++;			graph[v].parent = u;			DFS(graph, v);			graph[u].up = min(graph[u].up, graph[v].up);			graph[u].degree++;		}	}	for(auto v : graph[u].adjlist){		graph[u].up = min({graph[u].up, graph[v].up, graph[v].depth});	}}int main(){	ios_base::sync_with_stdio(false);	cin.tie(nullptr);	int edge_num, node_num;	cin >> node_num >> edge_num;	vector<GraphNode> graph(node_num+1);	for(int i = 0;i < edge_num;i++){		int u, v;		cin >> u >> v;		graph[u].adjlist.push_back(v);		graph[v].adjlist.push_back(u);	}	DFS(graph, 1);	cout << "depth:\n";	int cnt = 0;	for(auto it : graph){		if(cnt)			cout << cnt << ' ' << it.depth << '\n';		cnt++;	}			cout << "\nup:\n";	cnt = 0;	for(auto it : graph){		if(cnt)			cout << cnt << ' ' << it.up << '\n';		cnt++;	}			cout << "\ndegree:\n";	cnt = 0;	for(auto it : graph){		if(cnt)			cout << cnt << ' ' << it.degree << '\n';		cnt++;	}	cout << "\nparent:\n";	cnt = 0;	for(auto it : graph){		if(cnt)			cout << cnt << ' ' << it.parent << '\n';		cnt++;	}	cout << '\n';	for(int i = 1;i <= node_num;i++){		if(i == 1){			cout << "s(" << i << ", G) = " << graph[i].degree << '\n';		}		else{			cnt = 1;			for(auto v : graph[i].adjlist)				if(v != graph[i].parent)					cnt += (graph[i].depth == graph[v].up);			cout << "s(" << i << ", G) = " << cnt << '\n';		}	}		}